1 Creating a literal function
2 Determine the type of a variable 
3 If, else if, else 
4 Switch statement
5 Objects 
6 Using objects for Lookup
7 Testing objects for properties





1 Creating a literal function
function testFun(param1, param2) {
  console.log(param1, param2);
}


2 Determine the type of a variable 
typeof 3
typeof '3'


3 If, else if, else 
if (num > 15) {
  return "Bigger than 15";
} else if (num < 5) {
  return "Smaller than 5";
} else {
  return "Between 5 and 15";
}


4 Switch statement
switch(num) {
  case value1:
    statement1;
    break;
  case value2:
    statement2;
    break;
...
  case valueN:
    statementN;
    break;
...
  default:
    defaultStatement;
    break;
}

switch(val) {
  case 1:
  case 2:
  case 3:
    result = "1, 2, or 3";
    break;
  case 4:
    result = "4 alone";
}



5 Objects 
var cat = {
  "name": "Whiskers",
  "legs": 4,
  "tails": 1,
  "enemies": ["Water", "Dogs"]
};

var catName1 = cat.name;
var catName2 = cat["name"];

var catNameVariable = "name";
cat[catNameVariable];

cat.newProp = 'newproperty';
delete cat.newProp;


6 Using Objects For Lookup 
// Setup
function phoneticLookup(val) {

  // Only change code below this line
var lookup = {
  "alpha": "Adams",
  "bravo":"Boston",
  "charlie":"Chicago",
  "delta":"Denver",
  "echo": "Easy",
  "foxtrot":"Frank"
}
var result = lookup[val];

  // Only change code above this line
  return result;
}

// Change this value to test
phoneticLookup("charlie");



7 Testing objects for properties
// Setup
var myObj = {
  gift: "pony",
  pet: "kitten",
  bed: "sleigh"
};

function checkObj(checkProp) {
  // Your Code Here
  if (myObj.hasOwnProperty(checkProp)){
    return myObj[checkProp];
  }
  else { 
    return "Not Found";
  }
}

// Test your code by modifying these values
checkObj("gift");